Qualtrics.SurveyEngine.addOnReady(function() {
  var valence = "${e://Field(Seq1)}";
  var round = 1;
  var qid = this.questionId;
  
  // Competition selection interface
  var selectionHtml = ''
    + '<div style="font-family:sans-serif; max-width:600px; margin:0 auto; text-align:center; padding:20px;">'
    +   '<h3 style="font-size:1.5em; margin-bottom:20px; color:#333;">Choose Your Game Mode - Round 1</h3>'
    +   '<p style="font-size:1.1em; margin-bottom:30px; color:#666;">Select the type of challenge you want to face:</p>'
    +   '<div style="display:flex; flex-direction:column; gap:15px; max-width:400px; margin:0 auto;">'
    +     '<button id="highCompBtn" style="'
    +       'background: linear-gradient(135deg, #ff6b6b, #ee5a52); '
    +       'color: white; '
    +       'border: none; '
    +       'padding: 15px 20px; '
    +       'border-radius: 10px; '
    +       'font-size: 1.1em; '
    +       'font-weight: bold; '
    +       'cursor: pointer; '
    +       'transition: all 0.3s ease; '
    +       'box-shadow: 0 4px 12px rgba(255,107,107,0.3);'
    +     '">'
    +       'üî• High Competition'
    +       '<br><small style="font-weight:normal; opacity:0.9;">vs Expert AI - Fast & Challenging</small>'
    +     '</button>'
    +     '<button id="lowCompBtn" style="'
    +       'background: linear-gradient(135deg, #a8e6cf, #7fcdcd); '
    +       'color: white; '
    +       'border: none; '
    +       'padding: 15px 20px; '
    +       'border-radius: 10px; '
    +       'font-size: 1.1em; '
    +       'font-weight: bold; '
    +       'cursor: pointer; '
    +       'transition: all 0.3s ease; '
    +       'box-shadow: 0 4px 12px rgba(168,230,207,0.3);'
    +     '">'
    +       'üíö Low Competition'
    +       '<br><small style="font-weight:normal; opacity:0.9;">vs Beginner AI - Relaxed & Fun</small>'
    +     '</button>'
    +     '<button id="soloBtn" style="'
    +       'background: linear-gradient(135deg, #4ecdc4, #44a08d); '
    +       'color: white; '
    +       'border: none; '
    +       'padding: 15px 20px; '
    +       'border-radius: 10px; '
    +       'font-size: 1.1em; '
    +       'font-weight: bold; '
    +       'cursor: pointer; '
    +       'transition: all 0.3s ease; '
    +       'box-shadow: 0 4px 12px rgba(78,205,196,0.3);'
    +     '">'
    +       '‚≠ê Solo Mode'
    +       '<br><small style="font-weight:normal; opacity:0.9;">Play Alone - Practice & Improve</small>'
    +     '</button>'
    +   '</div>'
    + '</div>';

  jQuery("#" + qid + " .QuestionText").html(selectionHtml);

  // Add hover effects
  jQuery('#highCompBtn').hover(
    function() { jQuery(this).css('transform', 'translateY(-2px) scale(1.02)'); },
    function() { jQuery(this).css('transform', 'translateY(0) scale(1)'); }
  );
  jQuery('#lowCompBtn').hover(
    function() { jQuery(this).css('transform', 'translateY(-2px) scale(1.02)'); },
    function() { jQuery(this).css('transform', 'translateY(0) scale(1)'); }
  );
  jQuery('#soloBtn').hover(
    function() { jQuery(this).css('transform', 'translateY(-2px) scale(1.02)'); },
    function() { jQuery(this).css('transform', 'translateY(0) scale(1)'); }
  );

  // Handle button clicks
  function startGame(competition, mode) {
    // Set the competition level in embedded data for use in later rounds
    Qualtrics.SurveyEngine.setEmbeddedData("Competition", competition);
    Qualtrics.SurveyEngine.setEmbeddedData("GameMode", mode);
    console.log("Player selected:", competition, "competition,", mode, "mode");
    
    var src = "https://stackadnan.github.io/tetris-game/"
      + "?competition=" + encodeURIComponent(competition)
      + "&valence=" + encodeURIComponent(valence)
      + "&mode=" + encodeURIComponent(mode)
      + "&round=" + round;

    // Detect mobile devices
    var isMobile = window.innerWidth <= 480 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // Set dimensions based on device type
    var containerStyle = isMobile 
      ? "font-family:sans-serif; width:223px; height:511px; overflow:hidden; user-scalable=no; margin:0 auto;"
      : "font-family:sans-serif; width:130vh; height:90vh; overflow:hidden; user-scalable=no";
    
    var gameHtml = ''
      + '<div style="' + containerStyle + '">'
      +   '<h3 style="font-size:1.2em; margin:4px 0;">'
      +     'Round 1 (' + competition + ' ' + (mode === 'solo' ? 'Solo' : 'Competition') + ')'
      +   '</h3>'
      +   '<iframe '
      +     'src="' + src + '" '
      +     'style="width:100%; height:calc(100% - 30px); border:0; display:block;" '
      +     'allowfullscreen>'
      +   '</iframe>'
      + '</div>';

    jQuery("#" + qid + " .QuestionText").html(gameHtml);
  }
  // Button event handlers
  jQuery('#highCompBtn').click(function() {
    startGame('High', 'vs');
  });

  jQuery('#lowCompBtn').click(function() {
    startGame('Low', 'vs');
  });

  jQuery('#soloBtn').click(function() {
    startGame('Low', 'solo'); // Use Low competition settings for solo mode
  });

  window.addEventListener("message", function(evt) {
    console.log('=== QUALTRICS MESSAGE LISTENER DEBUG (Round 1) ===');
    console.log('Received message event:', evt);
    console.log('Message data:', evt.data);
    console.log('Message origin:', evt.origin);
    
    var d = evt.data;
    if (!d) {
      console.log('No data in message');
      return;
    }
    
    console.log('Data type:', d.type);
    console.log('Data round:', d.round, 'Type:', typeof d.round);
    console.log('Expected round:', round, 'Type:', typeof round);
    console.log('Data text:', d.text);
    console.log('Data sender:', d.sender);
    
    // Handle player chat responses
    if (d.type === "chatResponse" && d.round === round) {
      console.log('Processing PLAYER chat response');
      console.log('Setting embedded data: ChatResponse' + round + ' = "' + d.text + '"');
      Qualtrics.SurveyEngine.setEmbeddedData("ChatResponse" + round, d.text);
      
      // Verify the data was saved
      var savedValue = Qualtrics.SurveyEngine.getEmbeddedData("ChatResponse" + round);
      console.log('Verification - player chat embedded data value:', savedValue);
      
      if (savedValue === d.text) {
        console.log('Player chat embedded data saved successfully');
      } else {
        console.log('WARNING: Player chat embedded data save failed!');
        console.log('Expected:', d.text);
        console.log('Actual:', savedValue);
      }
      
      console.log('Clicking next button...');
      console.log('================================================');
      
      // Add small delay to ensure data is saved before proceeding
      setTimeout(function() {
        jQuery("#NextButton").click();
      }, 100);
      return;
    }
    
    // Handle opponent/CPU chat messages
    if (d.type === "opponentChat" && d.round === round) {
      console.log('Processing OPPONENT chat message');
      console.log('Setting embedded data: OpponentChat' + round + ' = "' + d.text + '"');
      Qualtrics.SurveyEngine.setEmbeddedData("OpponentChat" + round, d.text);
      
      // Verify the data was saved
      var savedValue = Qualtrics.SurveyEngine.getEmbeddedData("OpponentChat" + round);
      console.log('Verification - opponent chat embedded data value:', savedValue);
      
      if (savedValue === d.text) {
        console.log('Opponent chat embedded data saved successfully');
      } else {
        console.log('WARNING: Opponent chat embedded data save failed!');
        console.log('Expected:', d.text);
        console.log('Actual:', savedValue);
      }
      
      console.log('Opponent message recorded, waiting for player response...');
      console.log('================================================');
      return;
    }
    
    // If message doesn't match expected criteria
    if (d.type !== "chatResponse" && d.type !== "opponentChat") {
      console.log('Message type mismatch - ignoring (type: ' + d.type + ')');
      return;
    }
    
    if (d.round !== round) {
      console.log('Round mismatch - ignoring (expected: ' + round + ', got: ' + d.round + ')');
      return;
    }
    
    console.log('Unknown message type or condition - ignoring');
    console.log('================================================');
  });
});