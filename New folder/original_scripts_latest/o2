Qualtrics.SurveyEngine.addOnReady(function() {
  var competition = "${e://Field(Competition)}";
  // Always use embedded data set in round 1
  if (competition !== "High" && competition !== "Low") {
    // Try to get from embedded data (should have been set in round 1)
    competition = Qualtrics.SurveyEngine.getEmbeddedData("Competition");
    if (competition !== "High" && competition !== "Low") {
      // Fallback: randomize and set for all rounds
      competition = Math.random() < 0.5 ? "High" : "Low";
      Qualtrics.SurveyEngine.setEmbeddedData("Competition", competition);
      console.log("Competition fallback assigned in round 2:", competition);
    } else {
      console.log("Competition loaded from embedded data in round 2:", competition);
    }
  } else {
    console.log("Competition from Qualtrics in round 2:", competition);
  }
  
  var valence     = "${e://Field(Seq2)}";
  var round       = 2;
  var qid         = this.questionId;

  // build a 100% wide, 75vh tall iframe
  var src = "https://stackadnan.github.io/tetris-game/"
    + "?competition=" + encodeURIComponent(competition)
    + "&valence="     + encodeURIComponent(valence)
    + "&round="       + round;
  var html = ''
    + '<div style="font-family:sans-serif; width:130vh; height:90vh; overflow:hidden; user-scalable=no">'
    +   '<h3 style="font-size:1.2em; margin:4px 0;">'
    +     'Round 2 ('+competition+' Competition)'
    +   '</h3>'
    +   '<iframe '
    +     'src="' + src + '" '
    +     'style="width:100%; height:calc(100% - 30px); border:0; display:block;" '
    +     'allowfullscreen>'
    +   '</iframe>'
    + '</div>';
  jQuery("#" + qid + " .QuestionText").html(html);  window.addEventListener("message", function(evt) {
    console.log('=== QUALTRICS MESSAGE LISTENER DEBUG (Round 2) ===');
    console.log('Received message event:', evt);
    console.log('Message data:', evt.data);
    console.log('Message origin:', evt.origin);
    
    var d = evt.data;
    if (!d) {
      console.log('No data in message');
      return;
    }
    
    console.log('Data type:', d.type);
    console.log('Data round:', d.round, 'Type:', typeof d.round);
    console.log('Expected round:', round, 'Type:', typeof round);
    console.log('Data text:', d.text);
    console.log('Data sender:', d.sender);
    
    // Handle player chat responses
    if (d.type === "chatResponse" && d.round === round) {
      console.log('Processing PLAYER chat response');
      console.log('Setting embedded data: ChatResponse' + round + ' = "' + d.text + '"');
      Qualtrics.SurveyEngine.setEmbeddedData("ChatResponse" + round, d.text);
      
      // Verify the data was saved
      var savedValue = Qualtrics.SurveyEngine.getEmbeddedData("ChatResponse" + round);
      console.log('Verification - player chat embedded data value:', savedValue);
      
      if (savedValue === d.text) {
        console.log('Player chat embedded data saved successfully');
      } else {
        console.log('WARNING: Player chat embedded data save failed!');
        console.log('Expected:', d.text);
        console.log('Actual:', savedValue);
      }
      
      console.log('Clicking next button...');
      console.log('================================================');
      
      // Add small delay to ensure data is saved before proceeding
      setTimeout(function() {
        jQuery("#NextButton").click();
      }, 100);
      return;
    }
    
    // Handle opponent/CPU chat messages
    if (d.type === "opponentChat" && d.round === round) {
      console.log('Processing OPPONENT chat message');
      console.log('Setting embedded data: OpponentChat' + round + ' = "' + d.text + '"');
      Qualtrics.SurveyEngine.setEmbeddedData("OpponentChat" + round, d.text);
      
      // Verify the data was saved
      var savedValue = Qualtrics.SurveyEngine.getEmbeddedData("OpponentChat" + round);
      console.log('Verification - opponent chat embedded data value:', savedValue);
      
      if (savedValue === d.text) {
        console.log('Opponent chat embedded data saved successfully');
      } else {
        console.log('WARNING: Opponent chat embedded data save failed!');
        console.log('Expected:', d.text);
        console.log('Actual:', savedValue);
      }
      
      console.log('Opponent message recorded, waiting for player response...');
      console.log('================================================');
      return;
    }
    
    // If message doesn't match expected criteria
    if (d.type !== "chatResponse" && d.type !== "opponentChat") {
      console.log('Message type mismatch - ignoring (type: ' + d.type + ')');
      return;
    }
    
    if (d.round !== round) {
      console.log('Round mismatch - ignoring (expected: ' + round + ', got: ' + d.round + ')');
      return;
    }
    
    console.log('Unknown message type or condition - ignoring');
    console.log('================================================');
  });
});