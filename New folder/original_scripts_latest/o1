Qualtrics.SurveyEngine.addOnReady(function() {
  var valence = "${e://Field(Seq1)}";
  var round = 1;
  var qid = this.questionId;
  
  // Randomly assign game mode
  var modes = [
    { competition: 'High', mode: 'vs', label: 'High Competition' },
    { competition: 'Low', mode: 'vs', label: 'Low Competition' },
  ];
  
  var randomIndex = Math.floor(Math.random() * modes.length);
  var assignedMode = modes[randomIndex];
  
  // Set the competition level and mode in embedded data for use in later rounds
  Qualtrics.SurveyEngine.setEmbeddedData("Competition", assignedMode.competition);
  Qualtrics.SurveyEngine.setEmbeddedData("GameMode", assignedMode.mode);
  console.log("Randomly assigned:", assignedMode.competition, "competition,", assignedMode.mode, "mode");

  // Start the game immediately with the randomly assigned mode
  function startGame(competition, mode) {
    
    var src = "https://stackadnan.github.io/tetris-game/"
      + "?competition=" + encodeURIComponent(competition)
      + "&valence=" + encodeURIComponent(valence)
      + "&mode=" + encodeURIComponent(mode)
      + "&round=" + round;

    // Detect mobile devices
    var isMobile = window.innerWidth <= 480 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // Set dimensions based on device type
    var containerStyle = isMobile 
      ? "font-family:sans-serif; width:315px; height:600px; overflow:hidden; user-scalable=no; margin:0 auto;"
      : "font-family:sans-serif; width:130vh; height:90vh; overflow:hidden; user-scalable=no";
    
    var gameHtml = ''
      + '<div style="' + containerStyle + '">'
      +   '<h3 style="font-size:1.2em; margin:4px 0;">'
      +     'Round 1 (' + competition + ' ' + (mode === 'solo' ? 'Solo' : 'Competition') + ')'
      +   '</h3>'
      +   '<iframe '
      +     'src="' + src + '" '
      +     'style="width:100%; height:calc(100% - 30px); border:0; display:block;" '
      +     'allowfullscreen>'
      +   '</iframe>'
      + '</div>';    jQuery("#" + qid + " .QuestionText").html(gameHtml);
  }
  
  // Start the game immediately with the randomly assigned mode
  startGame(assignedMode.competition, assignedMode.mode);

  window.addEventListener("message", function(evt) {
    console.log('=== QUALTRICS MESSAGE LISTENER DEBUG (Round 1) ===');
    console.log('Received message event:', evt);
    console.log('Message data:', evt.data);
    console.log('Message origin:', evt.origin);
    
    var d = evt.data;
    if (!d) {
      console.log('No data in message');
      return;
    }
    
    console.log('Data type:', d.type);
    console.log('Data round:', d.round, 'Type:', typeof d.round);
    console.log('Expected round:', round, 'Type:', typeof round);
    console.log('Data text:', d.text);
    console.log('Data sender:', d.sender);
    
    // Handle player chat responses
    if (d.type === "chatResponse" && d.round === round) {
      console.log('Processing PLAYER chat response');
      console.log('Setting embedded data: ChatResponse' + round + ' = "' + d.text + '"');
      Qualtrics.SurveyEngine.setEmbeddedData("ChatResponse" + round, d.text);
      
      // Verify the data was saved
      var savedValue = Qualtrics.SurveyEngine.getEmbeddedData("ChatResponse" + round);
      console.log('Verification - player chat embedded data value:', savedValue);
      
      if (savedValue === d.text) {
        console.log('Player chat embedded data saved successfully');
      } else {
        console.log('WARNING: Player chat embedded data save failed!');
        console.log('Expected:', d.text);
        console.log('Actual:', savedValue);
      }
      
      console.log('Clicking next button...');
      console.log('================================================');
      
      // Add small delay to ensure data is saved before proceeding
      setTimeout(function() {
        jQuery("#NextButton").click();
      }, 100);
      return;
    }
    
    // Handle opponent/CPU chat messages
    if (d.type === "opponentChat" && d.round === round) {
      console.log('Processing OPPONENT chat message');
      console.log('Setting embedded data: OpponentChat' + round + ' = "' + d.text + '"');
      Qualtrics.SurveyEngine.setEmbeddedData("OpponentChat" + round, d.text);
      
      // Verify the data was saved
      var savedValue = Qualtrics.SurveyEngine.getEmbeddedData("OpponentChat" + round);
      console.log('Verification - opponent chat embedded data value:', savedValue);
      
      if (savedValue === d.text) {
        console.log('Opponent chat embedded data saved successfully');
      } else {
        console.log('WARNING: Opponent chat embedded data save failed!');
        console.log('Expected:', d.text);
        console.log('Actual:', savedValue);
      }
      
      console.log('Opponent message recorded, waiting for player response...');
      console.log('================================================');
      return;
    }
    
    // If message doesn't match expected criteria
    if (d.type !== "chatResponse" && d.type !== "opponentChat") {
      console.log('Message type mismatch - ignoring (type: ' + d.type + ')');
      return;
    }
    
    if (d.round !== round) {
      console.log('Round mismatch - ignoring (expected: ' + round + ', got: ' + d.round + ')');
      return;
    }
    
    console.log('Unknown message type or condition - ignoring');
    console.log('================================================');
  });
});